#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Definición de la estructura para almacenar información del estudiante
typedef struct {
    char nombre[100];   // Tamaño fijo grande
    char apellido[100]; // Tamaño fijo grande
    unsigned int edad;
    char ID[20];        // Tamaño fijo grande
    int calificaciones[10]; // Suposición de hasta 10 calificaciones
    size_t num_calificaciones;
} Estudiante;

// Definición de una lista dinámica para almacenar estudiantes
Estudiante *lista_estudiantes = NULL; // Inicializamos como NULL
int num_estudiantes = 0;              // Contador de estudiantes

// Función para añadir un nuevo estudiante a la lista
void crear_estudiante(const char *nombre, const char *apellido, unsigned int edad, const char *ID, int *calificaciones, size_t num_calificaciones) {
    // Redimensionamos la lista para añadir un nuevo estudiante
    lista_estudiantes = realloc(lista_estudiantes, (num_estudiantes + 1) * sizeof(Estudiante));
    
    if (lista_estudiantes == NULL) {
        printf("Error al asignar memoria.\n");
        return;
    }

    Estudiante *nuevo_estudiante = &lista_estudiantes[num_estudiantes];
    snprintf(nuevo_estudiante->nombre, 100, "%s", nombre);
    snprintf(nuevo_estudiante->apellido, 100, "%s", apellido);
    snprintf(nuevo_estudiante->ID, 20, "%s", ID);
    nuevo_estudiante->edad = edad;

    for (size_t i = 0; i < num_calificaciones; i++) {
        nuevo_estudiante->calificaciones[i] = calificaciones[i];
    }
    nuevo_estudiante->num_calificaciones = num_calificaciones;

    num_estudiantes++; // Aumentamos el número de estudiantes
    printf("Estudiante con ID %s ha sido creado.\n", ID);
}

// Función para imprimir los detalles de un estudiante
void imprimir_estudiante(Estudiante *estudiante) {
    printf("Nombre: %s %s\nEdad: %u\nID: %s\nCalificaciones: ", estudiante->nombre, estudiante->apellido, estudiante->edad, estudiante->ID);
    for (size_t i = 0; i < estudiante->num_calificaciones; i++) {
        printf("%d ", estudiante->calificaciones[i]);
    }
    printf("\n");
}

// Función para imprimir todos los estudiantes
void imprimir_todos_estudiantes() {
    for (int i = 0; i < num_estudiantes; i++) {
        imprimir_estudiante(&lista_estudiantes[i]);
        printf("\n");
    }
}

// Función para modificar un estudiante por ID
void modificar_estudiante(const char *ID, const char *nuevo_nombre, const char *nuevo_apellido, unsigned int nueva_edad, int *nuevas_calificaciones, size_t num_calificaciones) {
    for (int i = 0; i < num_estudiantes; i++) {
        if (strcmp(lista_estudiantes[i].ID, ID) == 0) {
            snprintf(lista_estudiantes[i].nombre, 100, "%s", nuevo_nombre);
            snprintf(lista_estudiantes[i].apellido, 100, "%s", nuevo_apellido);
            lista_estudiantes[i].edad = nueva_edad;

            for (size_t j = 0; j < num_calificaciones; j++) {
                lista_estudiantes[i].calificaciones[j] = nuevas_calificaciones[j];
            }
            lista_estudiantes[i].num_calificaciones = num_calificaciones;

            printf("Estudiante con ID %s ha sido modificado.\n", ID);
            return;
        }
    }
    printf("Estudiante con ID %s no encontrado.\n", ID);
}

// Función para eliminar un estudiante por ID
void eliminar_estudiante(const char *ID) {
    for (int i = 0; i < num_estudiantes; i++) {
        if (strcmp(lista_estudiantes[i].ID, ID) == 0) {
            // Movemos los elementos hacia la izquierda para eliminar el estudiante
            for (int j = i; j < num_estudiantes - 1; j++) {
                lista_estudiantes[j] = lista_estudiantes[j + 1];
            }
            num_estudiantes--; // Disminuimos el número de estudiantes

            // Redimensionamos la lista de estudiantes
            lista_estudiantes = realloc(lista_estudiantes, num_estudiantes * sizeof(Estudiante));
            printf("Estudiante con ID %s ha sido eliminado.\n", ID);
            return;
        }
    }
    printf("Estudiante con ID %s no encontrado.\n", ID);
}

int main() {
    // Crear estudiantes
    int calificaciones1[] = {85, 90, 78};
    crear_estudiante("Carlos", "Gomez", 20, "12345678", calificaciones1, 3);

    int calificaciones2[] = {88, 92, 80};
    crear_estudiante("Ana", "Martinez", 22, "87654321", calificaciones2, 3);

    // Imprimir todos los estudiantes
    imprimir_todos_estudiantes();

    // Modificar un estudiante
    int nuevas_calificaciones[] = {90, 95, 85};
    modificar_estudiante("12345678", "Juan", "Perez", 21, nuevas_calificaciones, 3);

    // Imprimir todos los estudiantes después de la modificación
    imprimir_todos_estudiantes();

    // Eliminar un estudiante
    eliminar_estudiante("12345678");

    // Imprimir todos los estudiantes después de la eliminación
    imprimir_todos_estudiantes();

    // Liberar la memoria al final
    free(lista_estudiantes);

    return 0;
}

